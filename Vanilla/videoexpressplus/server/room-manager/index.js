"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _opentok=_interopRequireDefault(require("opentok")),_utils=require("../utils"),_participant=_interopRequireDefault(require("./participant")),_roomManagerError=require("./room-manager-error");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class RoomManager{constructor(a,b,c,d,e,f){this.applicationId=c,this.apiKey=a,this.apiSecret=b,this.opentok=new _opentok.default(a,b),this.hasBreakoutRooms=d,this.hasWaitingRoom=e,this.hasWhiteboard=f,this.store=new Map,this.pstore=new Map}/**
   *
   * @param {*} options
   * @param {*} callback
   * @returns
   */createRoom(a){return this.opentok.createSession({mediaMode:"routed"},a)}/**
   * Adds a participant.
   *
   * @param {*} name - The name to display in the UI.
   *            This need not be unique.
   * @param {*} isHost - (optional) Whether the participant
   *            is (initially) a host. Any participant can
   *            later be promoted to a host.)
   * @param {*} id - (optional) The unique ID for the participant.
   *            If you do not specify an ID, a unique ID will be
   *            assigned. The developer may want to specify the participant ID
   *            if they have their own user identity records. That way, they
   *            can use this ID and look up users by their identifiers
   *            when they call getParticipantInfo().
   */addParticipant(a,b,c){var d,e;const f=c||(0,_utils.generateID)(),g=null===(d=this.store.get("parent"))||void 0===d?void 0:d.sessionId,h=null===(e=this.store.get("main"))||void 0===e?void 0:e.sessionID;this.pstore.set(a,new _participant.default(f,a,b,h,g))}/**
   *
   * @param {*} id - Unique Id of Participant
   */getParticipant(a){return this.pstore.get(a)}/**
   * Handle Client Events
   * @param requestBody
   * @returns
   */handleClientEvent(a){const b=this;switch(a.action){case"createMainRoom":{let c={},d={};// creates main room
const e=new Promise(a=>{this.createRoom((d,e)=>{if(d)throw new _roomManagerError.RoomManagerError("unable to create Room");const f=b.opentok.generateToken(e.sessionId);c={sessionId:e.sessionId,apiKey:b.apiKey,token:f},a()})}),f=new Promise(a=>{this.createRoom((c,e)=>{if(c&&c)throw new _roomManagerError.RoomManagerError("unable to create Messaging Session");const f=b.opentok.generateToken(e.sessionId);d={sessionId:e.sessionId,apiKey:b.apiKey,token:f},a()})});// creates parent room
return Promise.all([e,f]).then(()=>(this.store.set("participant",{name:null===a||void 0===a?void 0:a.participantId,roomId:"main"}),this.store.set("main",c),this.store.set("parent",d),{main:c,parent:d}))}case"getRoomData":return Promise.resolve({main:this.store.get("main"),parent:this.store.get("parent")});case"createBreakoutRoom":{let a={sessionId:"",apiKey:"",token:""};const c=new Promise(c=>{this.createRoom((d,e)=>{if(d)throw new _roomManagerError.RoomManagerError("unable to create Breakout Session");const f=b.opentok.generateToken(e.sessionId);a={sessionId:e.sessionId,apiKey:b.apiKey,token:f},c()})});return c.then(()=>(this.store.set(a.sessionId,a),Promise.resolve({main:this.store.get("main"),parent:this.store.get("parent"),break:a})))}case"getBreakOutRoomData":return Promise.resolve({main:this.store.get("main"),parent:this.store.get("parent"),break:this.store.get("break")});case"updateParticipantId":{const b=this.getParticipant(a.name);b&&a.participantId?b.id=a.participantId:this.addParticipant(a.name,!0,a.participantId?a.participantId:"");const c=this.getParticipant(a.name);return Promise.resolve(c)}case"joinBreakOutRoom":{const b=this.store.get("parent"),c=this.store.get(a.breakoutRoomId),d=this.pstore.get(a.name);return d&&(this.opentok.signal(b.sessionId,d.id,{type:"command",data:{break:c,context:"go-to-breakout-room"}},a=>a),d.activeRoomId=c.sessionId),Promise.resolve(d)}case"updateWaitingState":{const b=this.pstore.get(a.name),c=this.store.get("parent"),d=this.store.get("main");return b&&(this.opentok.signal(c.sessionId,b.id,{type:"allow-participant",data:{main:d,context:"go-to-main-room"}},a=>a),b.activeRoomId=d.sessionId),Promise.resolve(b)}default:throw new _roomManagerError.RoomManagerError(`unhandled client event ${a.action}`);}}}var _default=RoomManager;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,